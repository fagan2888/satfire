# Configuration for FMI Forest Fire satellite software

# Paths, masking configs, etc.

# Filename pattern for output text
# Possible keys are:
# - start_time (swath start time, UTC)
# - end_time (swath end time, UTC)
# - proc_time (processing time, UTC)
text_fname_pattern: "{start_time:%Y%m%d_%H%M}_fffsat.txt"
# If set, send pytroll messages about saved text files with this topic
# text_publish_topic: "/ears-avhrr/fffsat/txt"

# If defined, dump all data collected from forest fire detections to HDF5 file
hdf5_fname_pattern: "/tmp/{start_time:%Y%m%d_%H%M}_fffsat.h5"
# If set, send pytroll messages about saved HDF5 files with this topic
# hdf5_publish_topic: "/ears-avhrr/fffsat/hdf5"

# Publisher config.  Need to have atleast a empty dict if publishing
# is used.  The publisher default values are copied below.
#publisher:
#  port: 0
#  aliases: null
#  broadcast_interval: 2
#  nameservers: null

# Pattern for the data output
# Possible keys are:
# - longitude
# - latitude
# - probability_str (-> 'low', 'medium' or 'high')
# - quality_str (-> 'not fire', 'unknown', 'low', 'medium' or 'high')
# - confidence (-> 7, 8 or 9; combined info of probability and quality)
# - footprint_radius (maximum of along and across radii, used for landuse masking)
# - along_radius (footprint radius in along-track direction)
# - across_radius (footprint radius in across-track direction)
# - obs_time (calculated from swath start and end times for each scanline)
# - channel names (see "channels_to_load" below)
# - landuse_fraction_{urban,bare,water,permanent_ice_or_snow,no_data}
text_template: "{latitude:.3f},{longitude:.3f},{ch3b:.1f},{across_radius:.3f},{along_radius:.3f},{confidence:1d},0\n"
text_header: null

# Masking functions that create masks from the satellite data or use
# external products that are in satellite projection (eg. NWC SAF cloud mask)
mask_functions:
  get_cloud_mask:
    null
  get_nwc_mask:
    null
  create_swath_masks:
    null
  create_water_mask:
    null
  create_sun_glint_mask:
    null
  create_fcv_mask:
    null
  create_bad_data_mask:
    null
#  create_twilight_mask:
#    null

cma_message_tag:
  pps
sat_message_tag:
  hrpt

# Masking functions that apply auxiliary static data not in satellite projection
static_mask_functions:
  check_globcover:
    filename:
      /path/to/globcover.h5
    settings:
      urban:
        value: 190
        limit: 0.2
      bare:
        value: 200
        limit: 0.5
      water:
        value: 210
        limit: 0.5
      permanent_ice_or_snow:
        value: 220
        limit: 0.5
      no_data:
        value: 230
        limit: 0.5

# Channels to read
channels_to_load:
  - '1'
  - '2'
  - '3b'
  - '4'
  - '5'
  - latitude
  - longitude
  - solar_zenith_angle
  - sensor_zenith_angle
  - sun_sensor_azimuth_difference_angle

# Satpy reader
satpy_reader: avhrr_aapp_l1b

# List of used satellites.  Everything else is discarded
platform_names:
  - NOAA-15
  - NOAA-18
  - NOAA-19
  - Metop-A
  - Metop-B

# Channel names
vis_chan_name: &vis '1'
nir_chan_name: &nir '2'
mir_chan_name: &mir '3b'
ir1_chan_name: &ir1 '4'
ir2_chan_name: &ir2 '5'
sol_za_name: solar_zenith_angle
sat_za_name: sensor_zenith_angle
rel_az_name: sun_sensor_azimuth_difference_angle
lat_name: latitude
lon_name: longitude

# Actual satellite measurements
sensed_chan_names:
  - *vis
  - *nir
  - *mir
  - *ir1
  - *ir2

# Mask configs

land_cover_mask:
  mask_file: /path/to/globcover.h5
# snow_mask:
#   mask_file: snow_mask.h5
cloud_mask:
  # Threshold used only for built-in cloudmask
  threshold: 20
fcv_mask:
  # From Planck et.al. 2017
  threshold: 0.1
swath_edge_mask:
  # From Planck et.al. 2017
  threshold: 40.0
swath_end_mask:
  # Mask *threshold* pixels from both ends of the swath
  threshold: 10
water_mask:
  # First guess
  threshold: 30.0
sun_glint_mask:
  # From Planck et.al. 2017
  angle_threshold_1: 5.0
  angle_threshold_2: 15.0
  nir_refl_threshold: 20.0
twilight_mask:
  # Data between these two sun elevation limits are masked out
  angle_night_side: 2.0
  angle_day_side: 2.0

# Algorithm settings

# Temperature limits and deltas for different probability levels for
# day and night cases
probability_levels:
  2:
    name: low
    day:
      temp_mir: 310.
      delta_mir_ir: 6.
    night:
      temp_mir: 308.
      delta_mir_ir: 4.
  3:
    name: medium
    day:
      temp_mir: 311.
      delta_mir_ir: 6.
    night:
      temp_mir: 309.
      delta_mir_ir: 4.
  4:
    name: high
    day:
      temp_mir: 312.
      delta_mir_ir: 4.
    night:
      temp_mir: 310.
      delta_mir_ir: 4.

sol_za_day_limit: 85.

# Exclusion limits for background pixels
# MIR temperatures above this are invalid
bg_mir_temp_limit: 318.
# MIR - IR deltas above this are invalid
bg_delta_mir_ir: 12.

# Number and fraction of required valid background pixels
bg_num_valid: 6
bg_fraction_valid: .25

# Side lengths for background pixel checks
bg_side_lengths: [5, 7, 9, 11, 13, 15, 17, 19, 21]

# Approximate satellite orbital altitude, in km
satellite_altitude: 833.

# Instantaneous field of view (edge-to-edge) for one pixel, in radians
ifov: 1.4e-3

# Maximum width of the satellite swath (from sub-satellite to swath edge)
max_swath_width: 2000.

# Minimum quality level to write on file
minimum_quality_level: 2

standalone_log_config:
  version: 1
  handlers:
    console:
      class: logging.StreamHandler
      level: DEBUG
      formatter: simple
      stream: ext://sys.stdout
    file:
      class: logging.handlers.TimedRotatingFileHandler
      level: DEBUG
      formatter: simple
      filename: /tmp/fffsat.log
      backupCount: 7
      when: midnight
      utc: True
  formatters:
    simple:
      format: "[%(levelname)s: %(asctime)s] %(message)s"
  loggers:
    '':
      handlers:
        - console
        - file
      level: DEBUG
      propagate: True
